{
    "project": {
        "name": "Parch",
        "url": "https://github.com/dylanfoster/parch",
        "version": "1.0.0",
        "description": "Restify + Sequelize"
    },
    "files": {
        "docs/assets/vendor/bootstrap/js/bootstrap.min.js": {
            "name": "docs/assets/vendor/bootstrap/js/bootstrap.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/application.js": {
            "name": "src/application.js",
            "modules": {
                "parch": 1
            },
            "classes": {
                "Application": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/containment.js": {
            "name": "src/containment.js",
            "modules": {},
            "classes": {
                "containment": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/controller.js": {
            "name": "src/controller.js",
            "modules": {},
            "classes": {
                "Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/loader.js": {
            "name": "src/loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/model.js": {
            "name": "src/model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/model_manager.js": {
            "name": "src/model_manager.js",
            "modules": {},
            "classes": {
                "ModelManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/registry.js": {
            "name": "src/registry.js",
            "modules": {},
            "classes": {
                "Registry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/route.js": {
            "name": "src/route.js",
            "modules": {},
            "classes": {
                "Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/route_segment.js": {
            "name": "src/route_segment.js",
            "modules": {},
            "classes": {
                "RouteSegment": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/router.js": {
            "name": "src/router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "parch": {
            "name": "parch",
            "submodules": {},
            "elements": {},
            "classes": {
                "Application": 1,
                "containment": 1,
                "Controller": 1,
                "Model": 1,
                "ModelManager": 1,
                "Registry": 1,
                "Route": 1,
                "RouteSegment": 1,
                "Router": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/router.js",
            "line": 26,
            "description": "Base application",
            "is_constructor": 1,
            "todo": [
                "add default restfull methods (index",
                "show",
                "etc)",
                "implement store"
            ]
        }
    },
    "classes": {
        "Application": {
            "name": "Application",
            "shortname": "Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/application.js",
            "line": 19,
            "description": "Base application"
        },
        "containment": {
            "name": "containment",
            "shortname": "containment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/containment.js",
            "line": 26
        },
        "Controller": {
            "name": "Controller",
            "shortname": "Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/controller.js",
            "line": 10,
            "description": "Base controller"
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/model.js",
            "line": 5,
            "description": "Base model"
        },
        "ModelManager": {
            "name": "ModelManager",
            "shortname": "ModelManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/model_manager.js",
            "line": 6,
            "description": "Manages all models"
        },
        "Registry": {
            "name": "Registry",
            "shortname": "Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/registry.js",
            "line": 11,
            "is_constructor": 1
        },
        "Route": {
            "name": "Route",
            "shortname": "Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/route.js",
            "line": 5,
            "description": "Builds a consistent route path from a set of path segments\n\n    new Route(\"foo\", \"/bar\", \"baz/\"); => { path: \"/foo/bar/baz\" segments: [RouteSegment, RouteSegment, RouteSegment] }"
        },
        "RouteSegment": {
            "name": "RouteSegment",
            "shortname": "RouteSegment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/route_segment.js",
            "line": 3,
            "description": "Represents a single route segment, providing a consistent output segment\nregardless of trailing/leading slashes\n\n    new RouteSegment(\"/foo\"); => { path: \"/foo\", segment: \"/foo\" }\n    new RouteSegment(\"foo\"); => { path: \"/foo\", segment: \"foo\" }\n    new RouteSegment(\"/foo/\"); => { path: \"/foo\", segment: \"/foo/\" }\n    new RouteSegment(\"foo/\"); => { path: \"/foo\", segment: \"foo/\" }"
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parch",
            "namespace": "",
            "file": "src/router.js",
            "line": 26,
            "description": "Manages routing"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "docs/assets/vendor/bootstrap/js/bootstrap.min.js",
            "line": 1,
            "description": "Bootstrap.js by @fat & @mdo\nplugins: bootstrap-transition.js, bootstrap-modal.js, bootstrap-dropdown.js, bootstrap-scrollspy.js, bootstrap-tab.js, bootstrap-tooltip.js, bootstrap-popover.js, bootstrap-affix.js, bootstrap-alert.js, bootstrap-button.js, bootstrap-collapse.js, bootstrap-carousel.js, bootstrap-typeahead.js\nCopyright 2012 Twitter, Inc.\nhttp://www.apache.org/licenses/LICENSE-2.0.txt",
            "class": "Application"
        },
        {
            "file": "src/application.js",
            "line": 28,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "="
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "Application",
            "module": "parch"
        },
        {
            "file": "src/application.js",
            "line": 56,
            "description": "Get the restify application instance",
            "itemtype": "method",
            "name": "getApp",
            "deprecated": true,
            "return": {
                "description": "restify application instance",
                "type": "Object"
            },
            "class": "Application",
            "module": "parch"
        },
        {
            "file": "src/application.js",
            "line": 69,
            "description": "starts listening on the defined port",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "port",
                    "description": "the port to listen on. Default: 3000",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<undefined, Error>"
            },
            "class": "Application",
            "module": "parch"
        },
        {
            "file": "src/application.js",
            "line": 82,
            "description": "Normalizes constructor options",
            "itemtype": "method",
            "name": "_configure",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "user passed config options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "final config option",
                "type": "Object"
            },
            "class": "Application",
            "module": "parch"
        },
        {
            "file": "src/application.js",
            "line": 104,
            "description": "Returns the project directory (cwd) from which Application is being instantiated",
            "itemtype": "method",
            "name": "_getProjectDirectory",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "directory",
                "type": "String"
            },
            "class": "Application",
            "module": "parch"
        },
        {
            "file": "src/application.js",
            "line": 118,
            "description": "Run an initializer by name",
            "itemtype": "method",
            "name": "_initialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Application",
            "module": "parch"
        },
        {
            "file": "src/containment.js",
            "line": 5,
            "description": "Get the owner of an object",
            "itemtype": "method",
            "name": "getOwner",
            "params": [
                {
                    "name": "child",
                    "description": "object from which to fetch the parent",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "parent (owner)",
                "type": "Object"
            },
            "class": "containment",
            "module": "parch"
        },
        {
            "file": "src/containment.js",
            "line": 15,
            "description": "Set the owner object of the child object",
            "itemtype": "method",
            "name": "setOwner",
            "params": [
                {
                    "name": "child",
                    "description": "child object",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "parent (owner) object",
                    "type": "Object"
                }
            ],
            "class": "containment",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 26,
            "is_constructor": 1,
            "params": [
                {
                    "name": "registry",
                    "description": "module registry",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "configuration options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "model",
                            "description": "override the default model name",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 46,
            "description": "Builds, validates and saves a model instance.\n\n    return this.createRecord({ firstname: 'bar' }).then(record => {\n\n    });",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "data",
                    "description": "the model data to create the instance with",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the model instance",
                "type": "Promise<Model, Error>"
            },
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 82,
            "description": "Destroy a model instance and remove it from the db\n\n    return this.destroyRecord(1).then(() => {\n\n    });",
            "itemtype": "method",
            "name": "destroyRecord",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the resource to destroy",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<undefined, Error"
            },
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 99,
            "description": "Find all records.\n\n    return this.findAll().then(records => {\n\n    })\n\nYou can optionally pass in a where clause\n\n    return this.findAll({ username: 'john' }).then(user => {\n\n    });\n\nAs well as any finder options\n\n    return this.findAll(null, {\n      attributes: [\"title\"],\n      include: [this.models.User]\n    }).then(user => {\n\n    });",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "where",
                    "description": "sequelize where clause",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "<a href=\"http://docs.sequelizejs.com/en/v3/api/model/#findoneoptions-promiseinstance\" target=\"_blank\">\n  sequelize finder options\n</a>",
                    "type": "Object"
                }
            ],
            "see": [
                "http://docs.sequelizejs.com/en/v3/docs/querying/#where"
            ],
            "return": {
                "description": "an array of model instance",
                "type": "Promise<Model[], Error"
            },
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 140,
            "description": "Find a single instance by id\n\n    return this.findOne(1).then(record => {\n\n    });\n\nThe same options apply to findOne\n\n    return this.findOne(1, {\n      attributes: [\"firstName\"]\n    }).then(user => {\n\n    });",
            "itemtype": "method",
            "name": "findOne",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the instance to search for",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "<a href=\"http://docs.sequelizejs.com/en/v3/api/model/#findoneoptions-promiseinstance\" target=\"_blank\">\n  sequelize finder options\n</a>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Model, Error>"
            },
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 181,
            "description": "Update a single record\n\n    return this.updateRecord(1, { firstName: 'foo' }).then(record => {\n\n    });",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the record to update",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "the data to update on the record",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise<Model, Error>"
            },
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/controller.js",
            "line": 204,
            "description": "HACK: if this is a sequelize validation error, we transform it, otherwise\nwe can't be totally sure so just throw it up the stack",
            "class": "Controller",
            "module": "parch"
        },
        {
            "file": "src/loader.js",
            "line": 43,
            "description": "HACK: Babel no longer exports [default], though I'm pretty sure I have\nthat transform installed so....¯\\_(ツ)_/¯",
            "class": "Model",
            "module": "parch"
        },
        {
            "file": "src/model.js",
            "line": 18,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "sequelize model options",
                    "type": "Object"
                }
            ],
            "todo": [
                ": set owner and inject this model and all models (from manager)"
            ],
            "see": [
                "http://docs.sequelizejs.com/en/v3/docs/models-definition/#configuration"
            ],
            "class": "Model",
            "module": "parch"
        },
        {
            "file": "src/model.js",
            "line": 30,
            "description": "Model options get passed directly to sequelize model definition. The main\ndifference is the separation of model constructor options and model\nattribute definitions.\n\n<a href=\"http://docs.sequelizejs.com/en/v3/docs/models-definition/\">\n  see http://docs.sequelizejs.com/en/v3/docs/models-definition/\n</a>",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "see": [
                "http://docs.sequelizejs.com/en/v3/docs/models-definition/"
            ],
            "class": "Model",
            "module": "parch"
        },
        {
            "file": "src/model.js",
            "line": 45,
            "description": "Model definition\n\n    define(DataTypes) {\n      const user = {\n        username: {\n          allowNull: false\n          type: DataTypes.STRING\n        }\n      };\n\n      return user;\n    }\n\n<a href=\"http://docs.sequelizejs.com/en/v3/docs/models-definition/#data-types\">\n  see http://docs.sequelizejs.com/en/v3/docs/models-definition/#data-types\n</a>",
            "itemtype": "method",
            "name": "define",
            "params": [
                {
                    "name": "DataTypes",
                    "description": "sequelize DataTypes Object",
                    "type": "Object"
                }
            ],
            "see": [
                "http://docs.sequelizejs.com/en/v3/docs/models-definition/#data-types"
            ],
            "class": "Model",
            "module": "parch"
        },
        {
            "file": "src/model_manager.js",
            "line": 12,
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "connection",
                            "description": "",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ModelManager",
            "module": "parch"
        },
        {
            "file": "src/model_manager.js",
            "line": 34,
            "description": "Adds a model to internal cache\n\n    class FooModel extends parch.Model {\n      constructor(options) {\n        super(options);\n      }\n\n      associate(Foo, models) {\n      }\n\n      define(DataTypes) {\n      }\n    }\n\n    modelManager.addModel(Model);",
            "itemtype": "method",
            "name": "addModel",
            "params": [
                {
                    "name": "Model",
                    "description": "parch model class",
                    "type": "Object"
                }
            ],
            "class": "ModelManager",
            "module": "parch"
        },
        {
            "file": "src/registry.js",
            "line": 20,
            "description": "Inject an object into another object\n\n    registry.inject(object, \"service:store\");\n    // object.store\n\n    registry.inject(object, \"service:model-manager\", \"modelManager\");\n    // object.modelManager",
            "itemtype": "method",
            "name": "inject",
            "params": [
                {
                    "name": "context",
                    "description": "the object to inject onto",
                    "type": "Object"
                },
                {
                    "name": "lookup",
                    "description": "name by which to look search for the injection in the registry",
                    "type": "String"
                },
                {
                    "name": "propertyName",
                    "description": "optional property name of the newly injected object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "context",
                "type": "Object"
            },
            "class": "Registry",
            "module": "parch"
        },
        {
            "file": "src/registry.js",
            "line": 58,
            "description": "Find an object in the registry. If the object isn't found in the registry\nlookup will attempt to find it by requiring it in. If the require fails\nthe lookup fails\n\n    registry.lookup(\"service:foo\");",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "name",
                    "description": "colon delimited lookup string \"service:foo\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Registry",
            "module": "parch"
        },
        {
            "file": "src/registry.js",
            "line": 84,
            "description": "Register an object in the registry by name. If the name exists and it was\nregistered with the { singleton: true } option, an error will be thrown.\n\n    registry.register(\"service:foo\", { foo: \"bar\" });",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "name",
                    "description": "the name by which to register the object",
                    "type": "String"
                },
                {
                    "name": "Obj",
                    "description": "the object to store in the registry",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "register options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "instantiate",
                            "description": "instantiate the object when registering it",
                            "type": "Boolean"
                        },
                        {
                            "name": "singleton",
                            "description": "only allow one registration of this name/object",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Obj",
                "type": "Object"
            },
            "class": "Registry",
            "module": "parch"
        },
        {
            "file": "src/registry.js",
            "line": 125,
            "description": "Get the lookup directory for internal modules",
            "itemtype": "method",
            "name": "_getLookupDirectory",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "lookup",
                    "description": "string name of object we're looking for (e.g. 'module')",
                    "type": "String"
                }
            ],
            "return": {
                "description": "directory",
                "type": "String"
            },
            "class": "Registry",
            "module": "parch"
        },
        {
            "file": "src/registry.js",
            "line": 136,
            "description": "Attempts to load modules by requiring them in locally. Lookup directory is\ndetermined by the type of object we're loading (e.g. 'module' => ./) and the\nname of the module (e.g. 'model-manager') which is underscored",
            "itemtype": "method",
            "name": "_loadModule",
            "params": [
                {
                    "name": "lookup",
                    "description": "string name of object we're looking for (e.g. 'module')",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "string module name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "required module",
                "type": "Object"
            },
            "class": "Registry",
            "module": "parch"
        },
        {
            "file": "src/route.js",
            "line": 13,
            "description": "The constructor takes an unknown number of string segments and\nconverts them to a path",
            "is_constructor": 1,
            "params": [
                {
                    "name": "segment",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "path object",
                "type": "Object"
            },
            "class": "Route",
            "module": "parch"
        },
        {
            "file": "src/route.js",
            "line": 25,
            "description": "The path is the fully built path from segments e.g. /foo/bar/baz",
            "itemtype": "property",
            "name": "path",
            "type": "String",
            "class": "Route",
            "module": "parch"
        },
        {
            "file": "src/route.js",
            "line": 31,
            "description": "All segments that make up this route. Consists of an array of RouteSegments",
            "itemtype": "property",
            "name": "segments",
            "type": "Array",
            "class": "Route",
            "module": "parch"
        },
        {
            "file": "src/route_segment.js",
            "line": 15,
            "description": "constructor",
            "params": [
                {
                    "name": "segment",
                    "description": "A single route segment",
                    "type": "String"
                }
            ],
            "class": "RouteSegment",
            "module": "parch"
        },
        {
            "file": "src/route_segment.js",
            "line": 25,
            "description": "Determines if a path segment contains a leading slash /\n\n    new RouteSegment(\"foo\").hasLeadingSlash(); => false\n    new RouteSegment(\"foo/\").hasLeadingSlash(); => false\n    new RouteSegment(\"/foo/\").hasLeadingSlash(); => true\n    new RouteSegment(\"/foo\").hasLeadingSlash(); => true",
            "itemtype": "method",
            "name": "hasLeadingSlash",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "RouteSegment",
            "module": "parch"
        },
        {
            "file": "src/route_segment.js",
            "line": 40,
            "description": "Determines if a path segment contains a trailing slash /\n\n    new RouteSegment(\"foo\").hasTrailingSlash(); => false\n    new RouteSegment(\"/foo\").hasTrailingSlash(); => false\n    new RouteSegment(\"/foo/\").hasTrailingSlash(); => true\n    new RouteSegment(\"foo/\").hasTrailingSlash(); => true",
            "itemtype": "method",
            "name": "hasTrailingSlash",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "RouteSegment",
            "module": "parch"
        },
        {
            "file": "src/route_segment.js",
            "line": 55,
            "description": "Builds a consistent path segment, regardless of slashes",
            "itemtype": "method",
            "name": "_buildSegment",
            "return": {
                "description": "path segment",
                "type": "String"
            },
            "class": "RouteSegment",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 32,
            "description": "constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "registry",
                    "description": "{{#crossLink \"Registry\"}}module registry{{/crossLink}}",
                    "type": "Object"
                }
            ],
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 52,
            "description": "Bind a set of routes to a namespace.\nUses {{#crossLink \"Router/_buildRoute:method\"}}_buildRoute{{/crossLink}} to\nnormalize the path\n\n    Router.map(function () {\n      this.namespace(\"/users/:userId\", [\n        { path: \"/setProfileImage\", using: \"user:setImage\", method: \"post\" }\n      ])\n    });",
            "itemtype": "method",
            "name": "namespace",
            "params": [
                {
                    "name": "namespace",
                    "description": "the namespace to bind to, with or without leading slash",
                    "type": "String"
                },
                {
                    "name": "routes",
                    "description": "array of routes to bind to the namespace",
                    "type": "Array[Object]"
                }
            ],
            "since": "0.9.0",
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 83,
            "description": "Register a resource and wire up restful endpoints.\nUses {{#crossLink \"Router/_buildRoute:method\"}}_buildRoute{{/crossLink}} to\nnormalize the path\n\n    Router.map(function () {\n      this.resource(\"user\");\n    });",
            "itemtype": "method",
            "name": "resource",
            "params": [
                {
                    "name": "name",
                    "description": "the resource name in singular form",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "resource mapping options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "namespace",
                            "description": "mount the resource endpoint under a namespace\n\n    this.resource(\"user\", { namespace: \"api\" })",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 108,
            "description": "Register a single route.\nUses {{#crossLink \"Router/_buildRoute:method\"}}_buildRoute{{/crossLink}} to\nnormalize the path\n\n    Router.map(function () {\n      this.route(\"/user/foo\", { using: \"users:foo\", method: \"get\" });\n    });",
            "itemtype": "method",
            "name": "route",
            "params": [
                {
                    "name": "path",
                    "description": "the route path (e.g. /foo/bar)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "using",
                            "description": "colon delimited controller method identifier\n\n    this.route(\"/foo/bar\", { using: \"foo:bar\" });",
                            "type": "String"
                        },
                        {
                            "name": "method",
                            "description": "http method\n\n    this.route(\"/foo/bar\", { method: \"get\" });",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 139,
            "description": "Consistently builds a route from a set of path segments using\n{{#crossLink \"Route\"}}Route{{/crossLink}}\n\n    router._buildRoute(\"foo\", \"/bar\" \"baz/\");",
            "itemtype": "method",
            "name": "_buildRoute",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "route object with path property",
                "type": "Object"
            },
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 153,
            "description": "generates main route handler plus pre and post hooks",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_generateControllerHandlers",
            "params": [
                {
                    "name": "controller",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "controller method",
                    "type": "String"
                }
            ],
            "todo": [
                ": move hooks to controller instance methods and just call them"
            ],
            "return": {
                "description": "handlers",
                "type": "Array"
            },
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 184,
            "description": "Generates a path segment from a given resource name\n\n    router._getPathSegment(\"foo\", \"show\");\n    // :fooId",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getPathSegment",
            "params": [
                {
                    "name": "resource",
                    "description": ""
                },
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "return": {
                "description": "pathSegment",
                "type": "String"
            },
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 206,
            "description": "loads controllers from the loader",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadControllers",
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 225,
            "description": "maps a resource controller action and route",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_mapControllerAction",
            "params": [
                {
                    "name": "resource",
                    "description": "the resource name",
                    "type": "String"
                },
                {
                    "name": "controller",
                    "description": "the resource controller",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "the controller method",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "mapping options",
                    "type": "Object"
                }
            ],
            "class": "Router",
            "module": "parch"
        },
        {
            "file": "src/router.js",
            "line": 253,
            "description": "configures router resources",
            "static": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "called with the router instance",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "Router",
            "module": "parch"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/application.js:82"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/application.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/containment.js:5"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/registry.js:20"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/registry.js:58"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/registry.js:84"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/registry.js:125"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/registry.js:136"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/router.js:184"
        },
        {
            "message": "Missing item type\nBootstrap.js by @fat & @mdo\nplugins: bootstrap-transition.js, bootstrap-modal.js, bootstrap-dropdown.js, bootstrap-scrollspy.js, bootstrap-tab.js, bootstrap-tooltip.js, bootstrap-popover.js, bootstrap-affix.js, bootstrap-alert.js, bootstrap-button.js, bootstrap-collapse.js, bootstrap-carousel.js, bootstrap-typeahead.js\nCopyright 2012 Twitter, Inc.\nhttp://www.apache.org/licenses/LICENSE-2.0.txt",
            "line": " docs/assets/vendor/bootstrap/js/bootstrap.min.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/application.js:28"
        },
        {
            "message": "Missing item type",
            "line": " src/controller.js:26"
        },
        {
            "message": "Missing item type\nHACK: if this is a sequelize validation error, we transform it, otherwise\nwe can't be totally sure so just throw it up the stack",
            "line": " src/controller.js:204"
        },
        {
            "message": "Missing item type\nHACK: Babel no longer exports [default], though I'm pretty sure I have\nthat transform installed so....¯\\_(ツ)_/¯",
            "line": " src/loader.js:43"
        },
        {
            "message": "Missing item type",
            "line": " src/model.js:18"
        },
        {
            "message": "Missing item type",
            "line": " src/model_manager.js:12"
        },
        {
            "message": "Missing item type\nThe constructor takes an unknown number of string segments and\nconverts them to a path",
            "line": " src/route.js:13"
        },
        {
            "message": "Missing item type\nconstructor",
            "line": " src/route_segment.js:15"
        },
        {
            "message": "Missing item type\nconstructor",
            "line": " src/router.js:32"
        },
        {
            "message": "Missing item type\nconfigures router resources",
            "line": " src/router.js:253"
        }
    ]
}